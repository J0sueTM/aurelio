#+title: Why Aurelio?
#+author: Josue Teodoro, [[mailto:teodoro.josue@pm.me][Email]]
#+date: <2024-05-04 Sat>

* Why did I create Aurelio?

Aurelio is a parser that you can use to make sense of textual stuff in your project. I'll talk about possible usecases in the future, but that's the primary concern I had when I thought about creating Aurelio. Specifically, I work (or worked, I don't know when you're reading this) at [[https://moclojer.com][Moclojer]], a company behind this [[https://github.com/moclojer/moclojer][open source project]], a REST API mocker.

Moclojer (the FOSS project, not the company) can use yaml, json or openai spec for configuration. That's fine, but we were having problems when trying to lint the file. Since we have a specific usecase, handling syntax error was painful, since most linters we found out there worked fine, but failed to integrate well with schema validation (i.e. verifying if the content matches our defined spec), while also pointing out exactly where the problem happened.

* Should you use Aurelio?

This project was built with a single usecase in mind, so be aware of that. In any case, don't feel afraid to give a try. Hit me up on email or open an issue if you have any problems.

* Example Usecase :: Moclojer

This is what Moclojer's spec (yaml specific) looks like in a simplified BNF syntax:

#+begin_src txt
// yaml
indent ::= \t | ' '
seqb ::= '-' | '['
seqe ::= eps | ']'
mapb ::= eps | '{'
mape ::= eps | '}'

// mock
method ::= 'GET' | 'HEAD' | 'POST' | 'PUT' | DELETE'
         | 'CONNECT' | 'OPTIONS' | 'TRACE'
path ::= ('/' string)+
header ::= (string ':' string)
multiline ::= '|' | '>'
response ::= mapb
             [('status' ':' [200 ... 400])?
              ('headers' ':' mapb header+ mape)?
              'body' ':' multiline? string]
             mape
webhook ::= mapb
            [('sleep-time' ':' integer)?
             ('if' ':' expression)?
             'url' ':' string
             'method' ':' method
             'body' ':' multiline? string]
            mape
endpoint ::= seqb 'endpoint' mapb
             [('method' ':' method)?
              'path' ':' path
              'response' ':' response
              'webhook' ':' webhook]
              mape seqe
mock ::= endpoint*
#+end_src

And this is what it looks in Aurelio syntax:

#+begin_src clojure
  [;; yaml
   :indent [:+ [:| ["\t" " "]]]
   :seqb [:| [#block "-" #flow "["]]
   :seqe [:| [#block :empty #flow "]"]]
   :mapb [:| [#block :empty #flow "{"]]
   :mape [:| [#block :empty #flow "}"]]
   :multiline #block [:| "|" ">"]
 
   ;; mock
   :method [:| ["GET" "HEAD" "POST" "PUT" "DELETE"
                 "CONNECT" "OPTIONS" "TRACE"]]
   :path [:+ "/" :string]
   :header [:string ":" :string]
   :response [:mapb [:ul
                     [:? "status" ":" [:... [200 400]]]
                     [:? "headers" ":" :mapb [:+ header] :mape]
                     ["body" ":" [:? :multiline] :string]]
              :mape]
   :webhook [:mapb [:ul
                    [:? "sleep-time" ":" :int]
                    [:? "if" ":" :string]
                    ["url" ":" :string]
                    ["method" ":" :method]
                    ["body" ":" [:? :multiline] :string]]
             :mape]
   :endpoint [:seqb "endpoint"
              :mapb [:ul
                     [:? "method" ":" :method]
                     ["path" ":" :path]
                     ["response" ":" :response]
                     ["webhook" ":" :webhook]]
              :mape :seqe]
   :mock [:* :endpoint]]
#+end_src

The last one will be the one considered when parsing a given arg.
